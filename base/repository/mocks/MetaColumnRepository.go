// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	ent "github.com/mazti/restless/base/ent"
	mock "github.com/stretchr/testify/mock"
)

// MetaColumnRepository is an autogenerated mock type for the MetaColumnRepository type
type MetaColumnRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx
func (_m *MetaColumnRepository) Count(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, tableId, column
func (_m *MetaColumnRepository) Create(ctx context.Context, tableId int, column *ent.MetaColumn) (*ent.MetaColumn, error) {
	ret := _m.Called(ctx, tableId, column)

	var r0 *ent.MetaColumn
	if rf, ok := ret.Get(0).(func(context.Context, int, *ent.MetaColumn) *ent.MetaColumn); ok {
		r0 = rf(ctx, tableId, column)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.MetaColumn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, *ent.MetaColumn) error); ok {
		r1 = rf(ctx, tableId, column)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MetaColumnRepository) Delete(ctx context.Context, id int) (*ent.MetaColumn, error) {
	ret := _m.Called(ctx, id)

	var r0 *ent.MetaColumn
	if rf, ok := ret.Get(0).(func(context.Context, int) *ent.MetaColumn); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.MetaColumn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, id
func (_m *MetaColumnRepository) Get(ctx context.Context, id int) (*ent.MetaColumn, error) {
	ret := _m.Called(ctx, id)

	var r0 *ent.MetaColumn
	if rf, ok := ret.Get(0).(func(context.Context, int) *ent.MetaColumn); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.MetaColumn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, offset, limit
func (_m *MetaColumnRepository) List(ctx context.Context, offset int, limit int) ([]*ent.MetaColumn, error) {
	ret := _m.Called(ctx, offset, limit)

	var r0 []*ent.MetaColumn
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*ent.MetaColumn); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.MetaColumn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, column
func (_m *MetaColumnRepository) Update(ctx context.Context, column *ent.MetaColumn) (*ent.MetaColumn, error) {
	ret := _m.Called(ctx, column)

	var r0 *ent.MetaColumn
	if rf, ok := ret.Get(0).(func(context.Context, *ent.MetaColumn) *ent.MetaColumn); ok {
		r0 = rf(ctx, column)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.MetaColumn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ent.MetaColumn) error); ok {
		r1 = rf(ctx, column)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
