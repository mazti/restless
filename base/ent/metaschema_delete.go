// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/mazti/restless/base/ent/metaschema"
	"github.com/mazti/restless/base/ent/predicate"
)

// MetaSchemaDelete is the builder for deleting a MetaSchema entity.
type MetaSchemaDelete struct {
	config
	predicates []predicate.MetaSchema
}

// Where adds a new predicate to the delete builder.
func (msd *MetaSchemaDelete) Where(ps ...predicate.MetaSchema) *MetaSchemaDelete {
	msd.predicates = append(msd.predicates, ps...)
	return msd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (msd *MetaSchemaDelete) Exec(ctx context.Context) (int, error) {
	return msd.sqlExec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (msd *MetaSchemaDelete) ExecX(ctx context.Context) int {
	n, err := msd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (msd *MetaSchemaDelete) sqlExec(ctx context.Context) (int, error) {
	spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: metaschema.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: metaschema.FieldID,
			},
		},
	}
	if ps := msd.predicates; len(ps) > 0 {
		spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return sqlgraph.DeleteNodes(ctx, msd.driver, spec)
}

// MetaSchemaDeleteOne is the builder for deleting a single MetaSchema entity.
type MetaSchemaDeleteOne struct {
	msd *MetaSchemaDelete
}

// Exec executes the deletion query.
func (msdo *MetaSchemaDeleteOne) Exec(ctx context.Context) error {
	n, err := msdo.msd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &ErrNotFound{metaschema.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (msdo *MetaSchemaDeleteOne) ExecX(ctx context.Context) {
	msdo.msd.ExecX(ctx)
}
