// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/mazti/restless/base/ent/metaschema"
)

// MetaSchema is the model entity for the MetaSchema schema.
type MetaSchema struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Base holds the value of the "base" field.
	Base string `json:"base,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MetaSchema) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},
		&sql.NullString{},
		&sql.NullTime{},
		&sql.NullTime{},
		&sql.NullTime{},
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MetaSchema fields.
func (ms *MetaSchema) assignValues(values ...interface{}) error {
	if m, n := len(values), len(metaschema.Columns); m != n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ms.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field base", values[0])
	} else if value.Valid {
		ms.Base = value.String
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[1])
	} else if value.Valid {
		ms.CreatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[2])
	} else if value.Valid {
		ms.UpdatedAt = value.Time
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field deleted_at", values[3])
	} else if value.Valid {
		ms.DeletedAt = new(time.Time)
		*ms.DeletedAt = value.Time
	}
	return nil
}

// QueryTables queries the tables edge of the MetaSchema.
func (ms *MetaSchema) QueryTables() *MetaTableQuery {
	return (&MetaSchemaClient{ms.config}).QueryTables(ms)
}

// Update returns a builder for updating this MetaSchema.
// Note that, you need to call MetaSchema.Unwrap() before calling this method, if this MetaSchema
// was returned from a transaction, and the transaction was committed or rolled back.
func (ms *MetaSchema) Update() *MetaSchemaUpdateOne {
	return (&MetaSchemaClient{ms.config}).UpdateOne(ms)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ms *MetaSchema) Unwrap() *MetaSchema {
	tx, ok := ms.config.driver.(*txDriver)
	if !ok {
		panic("ent: MetaSchema is not a transactional entity")
	}
	ms.config.driver = tx.drv
	return ms
}

// String implements the fmt.Stringer.
func (ms *MetaSchema) String() string {
	var builder strings.Builder
	builder.WriteString("MetaSchema(")
	builder.WriteString(fmt.Sprintf("id=%v", ms.ID))
	builder.WriteString(", base=")
	builder.WriteString(ms.Base)
	builder.WriteString(", created_at=")
	builder.WriteString(ms.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ms.UpdatedAt.Format(time.ANSIC))
	if v := ms.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// MetaSchemas is a parsable slice of MetaSchema.
type MetaSchemas []*MetaSchema

func (ms MetaSchemas) config(cfg config) {
	for _i := range ms {
		ms[_i].config = cfg
	}
}
