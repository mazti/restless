// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/mazti/restless/base/ent/metatable"
)

// MetaTable is the model entity for the MetaTable schema.
type MetaTable struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MetaTable) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},
		&sql.NullString{},
		&sql.NullTime{},
		&sql.NullTime{},
		&sql.NullTime{},
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MetaTable fields.
func (mt *MetaTable) assignValues(values ...interface{}) error {
	if m, n := len(values), len(metatable.Columns); m != n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	mt.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		mt.Name = value.String
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[1])
	} else if value.Valid {
		mt.CreatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[2])
	} else if value.Valid {
		mt.UpdatedAt = value.Time
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field deleted_at", values[3])
	} else if value.Valid {
		mt.DeletedAt = new(time.Time)
		*mt.DeletedAt = value.Time
	}
	return nil
}

// QuerySchema queries the schema edge of the MetaTable.
func (mt *MetaTable) QuerySchema() *MetaSchemaQuery {
	return (&MetaTableClient{mt.config}).QuerySchema(mt)
}

// QueryColumns queries the columns edge of the MetaTable.
func (mt *MetaTable) QueryColumns() *MetaColumnQuery {
	return (&MetaTableClient{mt.config}).QueryColumns(mt)
}

// Update returns a builder for updating this MetaTable.
// Note that, you need to call MetaTable.Unwrap() before calling this method, if this MetaTable
// was returned from a transaction, and the transaction was committed or rolled back.
func (mt *MetaTable) Update() *MetaTableUpdateOne {
	return (&MetaTableClient{mt.config}).UpdateOne(mt)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (mt *MetaTable) Unwrap() *MetaTable {
	tx, ok := mt.config.driver.(*txDriver)
	if !ok {
		panic("ent: MetaTable is not a transactional entity")
	}
	mt.config.driver = tx.drv
	return mt
}

// String implements the fmt.Stringer.
func (mt *MetaTable) String() string {
	var builder strings.Builder
	builder.WriteString("MetaTable(")
	builder.WriteString(fmt.Sprintf("id=%v", mt.ID))
	builder.WriteString(", name=")
	builder.WriteString(mt.Name)
	builder.WriteString(", created_at=")
	builder.WriteString(mt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(mt.UpdatedAt.Format(time.ANSIC))
	if v := mt.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// MetaTables is a parsable slice of MetaTable.
type MetaTables []*MetaTable

func (mt MetaTables) config(cfg config) {
	for _i := range mt {
		mt[_i].config = cfg
	}
}
