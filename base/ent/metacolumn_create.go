// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/mazti/restless/base/ent/metacolumn"
	"github.com/mazti/restless/base/ent/metatable"
)

// MetaColumnCreate is the builder for creating a MetaColumn entity.
type MetaColumnCreate struct {
	config
	name        *string
	_type       *string
	_default    *string
	type_option *string
	created_at  *time.Time
	updated_at  *time.Time
	deleted_at  *time.Time
	table       map[int]struct{}
}

// SetName sets the name field.
func (mcc *MetaColumnCreate) SetName(s string) *MetaColumnCreate {
	mcc.name = &s
	return mcc
}

// SetType sets the type field.
func (mcc *MetaColumnCreate) SetType(s string) *MetaColumnCreate {
	mcc._type = &s
	return mcc
}

// SetDefault sets the default field.
func (mcc *MetaColumnCreate) SetDefault(s string) *MetaColumnCreate {
	mcc._default = &s
	return mcc
}

// SetTypeOption sets the type_option field.
func (mcc *MetaColumnCreate) SetTypeOption(s string) *MetaColumnCreate {
	mcc.type_option = &s
	return mcc
}

// SetCreatedAt sets the created_at field.
func (mcc *MetaColumnCreate) SetCreatedAt(t time.Time) *MetaColumnCreate {
	mcc.created_at = &t
	return mcc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (mcc *MetaColumnCreate) SetNillableCreatedAt(t *time.Time) *MetaColumnCreate {
	if t != nil {
		mcc.SetCreatedAt(*t)
	}
	return mcc
}

// SetUpdatedAt sets the updated_at field.
func (mcc *MetaColumnCreate) SetUpdatedAt(t time.Time) *MetaColumnCreate {
	mcc.updated_at = &t
	return mcc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (mcc *MetaColumnCreate) SetNillableUpdatedAt(t *time.Time) *MetaColumnCreate {
	if t != nil {
		mcc.SetUpdatedAt(*t)
	}
	return mcc
}

// SetDeletedAt sets the deleted_at field.
func (mcc *MetaColumnCreate) SetDeletedAt(t time.Time) *MetaColumnCreate {
	mcc.deleted_at = &t
	return mcc
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (mcc *MetaColumnCreate) SetNillableDeletedAt(t *time.Time) *MetaColumnCreate {
	if t != nil {
		mcc.SetDeletedAt(*t)
	}
	return mcc
}

// SetTableID sets the table edge to MetaTable by id.
func (mcc *MetaColumnCreate) SetTableID(id int) *MetaColumnCreate {
	if mcc.table == nil {
		mcc.table = make(map[int]struct{})
	}
	mcc.table[id] = struct{}{}
	return mcc
}

// SetNillableTableID sets the table edge to MetaTable by id if the given value is not nil.
func (mcc *MetaColumnCreate) SetNillableTableID(id *int) *MetaColumnCreate {
	if id != nil {
		mcc = mcc.SetTableID(*id)
	}
	return mcc
}

// SetTable sets the table edge to MetaTable.
func (mcc *MetaColumnCreate) SetTable(m *MetaTable) *MetaColumnCreate {
	return mcc.SetTableID(m.ID)
}

// Save creates the MetaColumn in the database.
func (mcc *MetaColumnCreate) Save(ctx context.Context) (*MetaColumn, error) {
	if mcc.name == nil {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if mcc._type == nil {
		return nil, errors.New("ent: missing required field \"type\"")
	}
	if mcc._default == nil {
		return nil, errors.New("ent: missing required field \"default\"")
	}
	if mcc.type_option == nil {
		return nil, errors.New("ent: missing required field \"type_option\"")
	}
	if mcc.created_at == nil {
		v := metacolumn.DefaultCreatedAt()
		mcc.created_at = &v
	}
	if mcc.updated_at == nil {
		v := metacolumn.DefaultUpdatedAt()
		mcc.updated_at = &v
	}
	if len(mcc.table) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"table\"")
	}
	return mcc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (mcc *MetaColumnCreate) SaveX(ctx context.Context) *MetaColumn {
	v, err := mcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mcc *MetaColumnCreate) sqlSave(ctx context.Context) (*MetaColumn, error) {
	var (
		mc   = &MetaColumn{config: mcc.config}
		spec = &sqlgraph.CreateSpec{
			Table: metacolumn.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: metacolumn.FieldID,
			},
		}
	)
	if value := mcc.name; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: metacolumn.FieldName,
		})
		mc.Name = *value
	}
	if value := mcc._type; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: metacolumn.FieldType,
		})
		mc.Type = *value
	}
	if value := mcc._default; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: metacolumn.FieldDefault,
		})
		mc.Default = *value
	}
	if value := mcc.type_option; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: metacolumn.FieldTypeOption,
		})
		mc.TypeOption = *value
	}
	if value := mcc.created_at; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: metacolumn.FieldCreatedAt,
		})
		mc.CreatedAt = *value
	}
	if value := mcc.updated_at; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: metacolumn.FieldUpdatedAt,
		})
		mc.UpdatedAt = *value
	}
	if value := mcc.deleted_at; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: metacolumn.FieldDeletedAt,
		})
		mc.DeletedAt = value
	}
	if nodes := mcc.table; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   metacolumn.TableTable,
			Columns: []string{metacolumn.TableColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metatable.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges = append(spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, mcc.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := spec.ID.Value.(int64)
	mc.ID = int(id)
	return mc, nil
}
