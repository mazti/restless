// Code generated by entc, DO NOT EDIT.

package metacolumn

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/mazti/restless/base/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.MetaColumn {
	return predicate.MetaColumn(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	},
	)
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	},
	)
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	},
	)
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	},
	)
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	},
	)
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	},
	)
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	},
	)
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	},
	)
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	},
	)
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	},
	)
}

// Default applies equality check predicate on the "default" field. It's identical to DefaultEQ.
func Default(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefault), v))
	},
	)
}

// TypeOption applies equality check predicate on the "type_option" field. It's identical to TypeOptionEQ.
func TypeOption(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeOption), v))
	},
	)
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	},
	)
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	},
	)
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	},
	)
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	},
	)
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	},
	)
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.MetaColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MetaColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	},
	)
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.MetaColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MetaColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	},
	)
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	},
	)
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	},
	)
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	},
	)
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	},
	)
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	},
	)
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	},
	)
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	},
	)
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	},
	)
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	},
	)
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	},
	)
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	},
	)
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.MetaColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MetaColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	},
	)
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.MetaColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MetaColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	},
	)
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	},
	)
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	},
	)
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	},
	)
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	},
	)
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldType), v))
	},
	)
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldType), v))
	},
	)
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldType), v))
	},
	)
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldType), v))
	},
	)
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldType), v))
	},
	)
}

// DefaultEQ applies the EQ predicate on the "default" field.
func DefaultEQ(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefault), v))
	},
	)
}

// DefaultNEQ applies the NEQ predicate on the "default" field.
func DefaultNEQ(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefault), v))
	},
	)
}

// DefaultIn applies the In predicate on the "default" field.
func DefaultIn(vs ...string) predicate.MetaColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MetaColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDefault), v...))
	},
	)
}

// DefaultNotIn applies the NotIn predicate on the "default" field.
func DefaultNotIn(vs ...string) predicate.MetaColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MetaColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDefault), v...))
	},
	)
}

// DefaultGT applies the GT predicate on the "default" field.
func DefaultGT(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefault), v))
	},
	)
}

// DefaultGTE applies the GTE predicate on the "default" field.
func DefaultGTE(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefault), v))
	},
	)
}

// DefaultLT applies the LT predicate on the "default" field.
func DefaultLT(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefault), v))
	},
	)
}

// DefaultLTE applies the LTE predicate on the "default" field.
func DefaultLTE(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefault), v))
	},
	)
}

// DefaultContains applies the Contains predicate on the "default" field.
func DefaultContains(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDefault), v))
	},
	)
}

// DefaultHasPrefix applies the HasPrefix predicate on the "default" field.
func DefaultHasPrefix(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDefault), v))
	},
	)
}

// DefaultHasSuffix applies the HasSuffix predicate on the "default" field.
func DefaultHasSuffix(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDefault), v))
	},
	)
}

// DefaultEqualFold applies the EqualFold predicate on the "default" field.
func DefaultEqualFold(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDefault), v))
	},
	)
}

// DefaultContainsFold applies the ContainsFold predicate on the "default" field.
func DefaultContainsFold(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDefault), v))
	},
	)
}

// TypeOptionEQ applies the EQ predicate on the "type_option" field.
func TypeOptionEQ(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeOption), v))
	},
	)
}

// TypeOptionNEQ applies the NEQ predicate on the "type_option" field.
func TypeOptionNEQ(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTypeOption), v))
	},
	)
}

// TypeOptionIn applies the In predicate on the "type_option" field.
func TypeOptionIn(vs ...string) predicate.MetaColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MetaColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTypeOption), v...))
	},
	)
}

// TypeOptionNotIn applies the NotIn predicate on the "type_option" field.
func TypeOptionNotIn(vs ...string) predicate.MetaColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MetaColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTypeOption), v...))
	},
	)
}

// TypeOptionGT applies the GT predicate on the "type_option" field.
func TypeOptionGT(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTypeOption), v))
	},
	)
}

// TypeOptionGTE applies the GTE predicate on the "type_option" field.
func TypeOptionGTE(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTypeOption), v))
	},
	)
}

// TypeOptionLT applies the LT predicate on the "type_option" field.
func TypeOptionLT(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTypeOption), v))
	},
	)
}

// TypeOptionLTE applies the LTE predicate on the "type_option" field.
func TypeOptionLTE(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTypeOption), v))
	},
	)
}

// TypeOptionContains applies the Contains predicate on the "type_option" field.
func TypeOptionContains(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTypeOption), v))
	},
	)
}

// TypeOptionHasPrefix applies the HasPrefix predicate on the "type_option" field.
func TypeOptionHasPrefix(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTypeOption), v))
	},
	)
}

// TypeOptionHasSuffix applies the HasSuffix predicate on the "type_option" field.
func TypeOptionHasSuffix(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTypeOption), v))
	},
	)
}

// TypeOptionEqualFold applies the EqualFold predicate on the "type_option" field.
func TypeOptionEqualFold(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTypeOption), v))
	},
	)
}

// TypeOptionContainsFold applies the ContainsFold predicate on the "type_option" field.
func TypeOptionContainsFold(v string) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTypeOption), v))
	},
	)
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	},
	)
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	},
	)
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MetaColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MetaColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	},
	)
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MetaColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MetaColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	},
	)
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	},
	)
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	},
	)
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	},
	)
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	},
	)
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	},
	)
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	},
	)
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MetaColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MetaColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	},
	)
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MetaColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MetaColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	},
	)
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	},
	)
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	},
	)
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	},
	)
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	},
	)
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	},
	)
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	},
	)
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.MetaColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MetaColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	},
	)
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.MetaColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MetaColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	},
	)
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	},
	)
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	},
	)
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	},
	)
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	},
	)
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	},
	)
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	},
	)
}

// HasTable applies the HasEdge predicate on the "table" edge.
func HasTable() predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TableTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TableTable, TableColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	},
	)
}

// HasTableWith applies the HasEdge predicate on the "table" edge with a given conditions (other predicates).
func HasTableWith(preds ...predicate.MetaTable) predicate.MetaColumn {
	return predicate.MetaColumn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TableInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TableTable, TableColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	},
	)
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.MetaColumn) predicate.MetaColumn {
	return predicate.MetaColumn(
		func(s *sql.Selector) {
			s1 := s.Clone().SetP(nil)
			for _, p := range predicates {
				p(s1)
			}
			s.Where(s1.P())
		},
	)
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.MetaColumn) predicate.MetaColumn {
	return predicate.MetaColumn(
		func(s *sql.Selector) {
			s1 := s.Clone().SetP(nil)
			for i, p := range predicates {
				if i > 0 {
					s1.Or()
				}
				p(s1)
			}
			s.Where(s1.P())
		},
	)
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MetaColumn) predicate.MetaColumn {
	return predicate.MetaColumn(
		func(s *sql.Selector) {
			p(s.Not())
		},
	)
}
