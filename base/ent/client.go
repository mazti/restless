// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/mazti/restless/base/ent/migrate"

	"github.com/mazti/restless/base/ent/metacolumn"
	"github.com/mazti/restless/base/ent/metaschema"
	"github.com/mazti/restless/base/ent/metatable"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// MetaColumn is the client for interacting with the MetaColumn builders.
	MetaColumn *MetaColumnClient
	// MetaSchema is the client for interacting with the MetaSchema builders.
	MetaSchema *MetaSchemaClient
	// MetaTable is the client for interacting with the MetaTable builders.
	MetaTable *MetaTableClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	c := config{log: log.Println}
	c.options(opts...)
	return &Client{
		config:     c,
		Schema:     migrate.NewSchema(c.driver),
		MetaColumn: NewMetaColumnClient(c),
		MetaSchema: NewMetaSchemaClient(c),
		MetaTable:  NewMetaTableClient(c),
	}
}

// Open opens a connection to the database specified by the driver name and a
// driver-specific data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug}
	return &Tx{
		config:     cfg,
		MetaColumn: NewMetaColumnClient(cfg),
		MetaSchema: NewMetaSchemaClient(cfg),
		MetaTable:  NewMetaTableClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		MetaColumn.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true}
	return &Client{
		config:     cfg,
		Schema:     migrate.NewSchema(cfg.driver),
		MetaColumn: NewMetaColumnClient(cfg),
		MetaSchema: NewMetaSchemaClient(cfg),
		MetaTable:  NewMetaTableClient(cfg),
	}
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// MetaColumnClient is a client for the MetaColumn schema.
type MetaColumnClient struct {
	config
}

// NewMetaColumnClient returns a client for the MetaColumn from the given config.
func NewMetaColumnClient(c config) *MetaColumnClient {
	return &MetaColumnClient{config: c}
}

// Create returns a create builder for MetaColumn.
func (c *MetaColumnClient) Create() *MetaColumnCreate {
	return &MetaColumnCreate{config: c.config}
}

// Update returns an update builder for MetaColumn.
func (c *MetaColumnClient) Update() *MetaColumnUpdate {
	return &MetaColumnUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *MetaColumnClient) UpdateOne(mc *MetaColumn) *MetaColumnUpdateOne {
	return c.UpdateOneID(mc.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *MetaColumnClient) UpdateOneID(id int) *MetaColumnUpdateOne {
	return &MetaColumnUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for MetaColumn.
func (c *MetaColumnClient) Delete() *MetaColumnDelete {
	return &MetaColumnDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MetaColumnClient) DeleteOne(mc *MetaColumn) *MetaColumnDeleteOne {
	return c.DeleteOneID(mc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MetaColumnClient) DeleteOneID(id int) *MetaColumnDeleteOne {
	return &MetaColumnDeleteOne{c.Delete().Where(metacolumn.ID(id))}
}

// Create returns a query builder for MetaColumn.
func (c *MetaColumnClient) Query() *MetaColumnQuery {
	return &MetaColumnQuery{config: c.config}
}

// Get returns a MetaColumn entity by its id.
func (c *MetaColumnClient) Get(ctx context.Context, id int) (*MetaColumn, error) {
	return c.Query().Where(metacolumn.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MetaColumnClient) GetX(ctx context.Context, id int) *MetaColumn {
	mc, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return mc
}

// QueryTable queries the table edge of a MetaColumn.
func (c *MetaColumnClient) QueryTable(mc *MetaColumn) *MetaTableQuery {
	query := &MetaTableQuery{config: c.config}
	id := mc.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(metacolumn.Table, metacolumn.FieldID, id),
		sqlgraph.To(metatable.Table, metatable.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, metacolumn.TableTable, metacolumn.TableColumn),
	)
	query.sql = sqlgraph.Neighbors(mc.driver.Dialect(), step)

	return query
}

// MetaSchemaClient is a client for the MetaSchema schema.
type MetaSchemaClient struct {
	config
}

// NewMetaSchemaClient returns a client for the MetaSchema from the given config.
func NewMetaSchemaClient(c config) *MetaSchemaClient {
	return &MetaSchemaClient{config: c}
}

// Create returns a create builder for MetaSchema.
func (c *MetaSchemaClient) Create() *MetaSchemaCreate {
	return &MetaSchemaCreate{config: c.config}
}

// Update returns an update builder for MetaSchema.
func (c *MetaSchemaClient) Update() *MetaSchemaUpdate {
	return &MetaSchemaUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *MetaSchemaClient) UpdateOne(ms *MetaSchema) *MetaSchemaUpdateOne {
	return c.UpdateOneID(ms.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *MetaSchemaClient) UpdateOneID(id int) *MetaSchemaUpdateOne {
	return &MetaSchemaUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for MetaSchema.
func (c *MetaSchemaClient) Delete() *MetaSchemaDelete {
	return &MetaSchemaDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MetaSchemaClient) DeleteOne(ms *MetaSchema) *MetaSchemaDeleteOne {
	return c.DeleteOneID(ms.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MetaSchemaClient) DeleteOneID(id int) *MetaSchemaDeleteOne {
	return &MetaSchemaDeleteOne{c.Delete().Where(metaschema.ID(id))}
}

// Create returns a query builder for MetaSchema.
func (c *MetaSchemaClient) Query() *MetaSchemaQuery {
	return &MetaSchemaQuery{config: c.config}
}

// Get returns a MetaSchema entity by its id.
func (c *MetaSchemaClient) Get(ctx context.Context, id int) (*MetaSchema, error) {
	return c.Query().Where(metaschema.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MetaSchemaClient) GetX(ctx context.Context, id int) *MetaSchema {
	ms, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ms
}

// QueryTables queries the tables edge of a MetaSchema.
func (c *MetaSchemaClient) QueryTables(ms *MetaSchema) *MetaTableQuery {
	query := &MetaTableQuery{config: c.config}
	id := ms.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(metaschema.Table, metaschema.FieldID, id),
		sqlgraph.To(metatable.Table, metatable.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, metaschema.TablesTable, metaschema.TablesColumn),
	)
	query.sql = sqlgraph.Neighbors(ms.driver.Dialect(), step)

	return query
}

// MetaTableClient is a client for the MetaTable schema.
type MetaTableClient struct {
	config
}

// NewMetaTableClient returns a client for the MetaTable from the given config.
func NewMetaTableClient(c config) *MetaTableClient {
	return &MetaTableClient{config: c}
}

// Create returns a create builder for MetaTable.
func (c *MetaTableClient) Create() *MetaTableCreate {
	return &MetaTableCreate{config: c.config}
}

// Update returns an update builder for MetaTable.
func (c *MetaTableClient) Update() *MetaTableUpdate {
	return &MetaTableUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *MetaTableClient) UpdateOne(mt *MetaTable) *MetaTableUpdateOne {
	return c.UpdateOneID(mt.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *MetaTableClient) UpdateOneID(id int) *MetaTableUpdateOne {
	return &MetaTableUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for MetaTable.
func (c *MetaTableClient) Delete() *MetaTableDelete {
	return &MetaTableDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MetaTableClient) DeleteOne(mt *MetaTable) *MetaTableDeleteOne {
	return c.DeleteOneID(mt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MetaTableClient) DeleteOneID(id int) *MetaTableDeleteOne {
	return &MetaTableDeleteOne{c.Delete().Where(metatable.ID(id))}
}

// Create returns a query builder for MetaTable.
func (c *MetaTableClient) Query() *MetaTableQuery {
	return &MetaTableQuery{config: c.config}
}

// Get returns a MetaTable entity by its id.
func (c *MetaTableClient) Get(ctx context.Context, id int) (*MetaTable, error) {
	return c.Query().Where(metatable.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MetaTableClient) GetX(ctx context.Context, id int) *MetaTable {
	mt, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return mt
}

// QuerySchema queries the schema edge of a MetaTable.
func (c *MetaTableClient) QuerySchema(mt *MetaTable) *MetaSchemaQuery {
	query := &MetaSchemaQuery{config: c.config}
	id := mt.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(metatable.Table, metatable.FieldID, id),
		sqlgraph.To(metaschema.Table, metaschema.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, metatable.SchemaTable, metatable.SchemaColumn),
	)
	query.sql = sqlgraph.Neighbors(mt.driver.Dialect(), step)

	return query
}

// QueryColumns queries the columns edge of a MetaTable.
func (c *MetaTableClient) QueryColumns(mt *MetaTable) *MetaColumnQuery {
	query := &MetaColumnQuery{config: c.config}
	id := mt.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(metatable.Table, metatable.FieldID, id),
		sqlgraph.To(metacolumn.Table, metacolumn.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, metatable.ColumnsTable, metatable.ColumnsColumn),
	)
	query.sql = sqlgraph.Neighbors(mt.driver.Dialect(), step)

	return query
}
