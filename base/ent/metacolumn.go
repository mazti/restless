// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/mazti/restless/base/ent/metacolumn"
)

// MetaColumn is the model entity for the MetaColumn schema.
type MetaColumn struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Default holds the value of the "default" field.
	Default string `json:"default,omitempty"`
	// TypeOption holds the value of the "type_option" field.
	TypeOption string `json:"type_option,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MetaColumn) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},
		&sql.NullString{},
		&sql.NullString{},
		&sql.NullString{},
		&sql.NullString{},
		&sql.NullTime{},
		&sql.NullTime{},
		&sql.NullTime{},
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MetaColumn fields.
func (mc *MetaColumn) assignValues(values ...interface{}) error {
	if m, n := len(values), len(metacolumn.Columns); m != n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	mc.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		mc.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field type", values[1])
	} else if value.Valid {
		mc.Type = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field default", values[2])
	} else if value.Valid {
		mc.Default = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field type_option", values[3])
	} else if value.Valid {
		mc.TypeOption = value.String
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[4])
	} else if value.Valid {
		mc.CreatedAt = value.Time
	}
	if value, ok := values[5].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[5])
	} else if value.Valid {
		mc.UpdatedAt = value.Time
	}
	if value, ok := values[6].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field deleted_at", values[6])
	} else if value.Valid {
		mc.DeletedAt = new(time.Time)
		*mc.DeletedAt = value.Time
	}
	return nil
}

// QueryTable queries the table edge of the MetaColumn.
func (mc *MetaColumn) QueryTable() *MetaTableQuery {
	return (&MetaColumnClient{mc.config}).QueryTable(mc)
}

// Update returns a builder for updating this MetaColumn.
// Note that, you need to call MetaColumn.Unwrap() before calling this method, if this MetaColumn
// was returned from a transaction, and the transaction was committed or rolled back.
func (mc *MetaColumn) Update() *MetaColumnUpdateOne {
	return (&MetaColumnClient{mc.config}).UpdateOne(mc)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (mc *MetaColumn) Unwrap() *MetaColumn {
	tx, ok := mc.config.driver.(*txDriver)
	if !ok {
		panic("ent: MetaColumn is not a transactional entity")
	}
	mc.config.driver = tx.drv
	return mc
}

// String implements the fmt.Stringer.
func (mc *MetaColumn) String() string {
	var builder strings.Builder
	builder.WriteString("MetaColumn(")
	builder.WriteString(fmt.Sprintf("id=%v", mc.ID))
	builder.WriteString(", name=")
	builder.WriteString(mc.Name)
	builder.WriteString(", type=")
	builder.WriteString(mc.Type)
	builder.WriteString(", default=")
	builder.WriteString(mc.Default)
	builder.WriteString(", type_option=")
	builder.WriteString(mc.TypeOption)
	builder.WriteString(", created_at=")
	builder.WriteString(mc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(mc.UpdatedAt.Format(time.ANSIC))
	if v := mc.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// MetaColumns is a parsable slice of MetaColumn.
type MetaColumns []*MetaColumn

func (mc MetaColumns) config(cfg config) {
	for _i := range mc {
		mc[_i].config = cfg
	}
}
