// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/mazti/restless/base/ent/metacolumn"
	"github.com/mazti/restless/base/ent/metatable"
	"github.com/mazti/restless/base/ent/predicate"
)

// MetaColumnUpdate is the builder for updating MetaColumn entities.
type MetaColumnUpdate struct {
	config
	name            *string
	_type           *string
	_default        *string
	type_option     *string
	created_at      *time.Time
	updated_at      *time.Time
	deleted_at      *time.Time
	cleardeleted_at bool
	table           map[int]struct{}
	clearedTable    bool
	predicates      []predicate.MetaColumn
}

// Where adds a new predicate for the builder.
func (mcu *MetaColumnUpdate) Where(ps ...predicate.MetaColumn) *MetaColumnUpdate {
	mcu.predicates = append(mcu.predicates, ps...)
	return mcu
}

// SetName sets the name field.
func (mcu *MetaColumnUpdate) SetName(s string) *MetaColumnUpdate {
	mcu.name = &s
	return mcu
}

// SetType sets the type field.
func (mcu *MetaColumnUpdate) SetType(s string) *MetaColumnUpdate {
	mcu._type = &s
	return mcu
}

// SetDefault sets the default field.
func (mcu *MetaColumnUpdate) SetDefault(s string) *MetaColumnUpdate {
	mcu._default = &s
	return mcu
}

// SetTypeOption sets the type_option field.
func (mcu *MetaColumnUpdate) SetTypeOption(s string) *MetaColumnUpdate {
	mcu.type_option = &s
	return mcu
}

// SetCreatedAt sets the created_at field.
func (mcu *MetaColumnUpdate) SetCreatedAt(t time.Time) *MetaColumnUpdate {
	mcu.created_at = &t
	return mcu
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (mcu *MetaColumnUpdate) SetNillableCreatedAt(t *time.Time) *MetaColumnUpdate {
	if t != nil {
		mcu.SetCreatedAt(*t)
	}
	return mcu
}

// SetUpdatedAt sets the updated_at field.
func (mcu *MetaColumnUpdate) SetUpdatedAt(t time.Time) *MetaColumnUpdate {
	mcu.updated_at = &t
	return mcu
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (mcu *MetaColumnUpdate) SetNillableUpdatedAt(t *time.Time) *MetaColumnUpdate {
	if t != nil {
		mcu.SetUpdatedAt(*t)
	}
	return mcu
}

// SetDeletedAt sets the deleted_at field.
func (mcu *MetaColumnUpdate) SetDeletedAt(t time.Time) *MetaColumnUpdate {
	mcu.deleted_at = &t
	return mcu
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (mcu *MetaColumnUpdate) SetNillableDeletedAt(t *time.Time) *MetaColumnUpdate {
	if t != nil {
		mcu.SetDeletedAt(*t)
	}
	return mcu
}

// ClearDeletedAt clears the value of deleted_at.
func (mcu *MetaColumnUpdate) ClearDeletedAt() *MetaColumnUpdate {
	mcu.deleted_at = nil
	mcu.cleardeleted_at = true
	return mcu
}

// SetTableID sets the table edge to MetaTable by id.
func (mcu *MetaColumnUpdate) SetTableID(id int) *MetaColumnUpdate {
	if mcu.table == nil {
		mcu.table = make(map[int]struct{})
	}
	mcu.table[id] = struct{}{}
	return mcu
}

// SetNillableTableID sets the table edge to MetaTable by id if the given value is not nil.
func (mcu *MetaColumnUpdate) SetNillableTableID(id *int) *MetaColumnUpdate {
	if id != nil {
		mcu = mcu.SetTableID(*id)
	}
	return mcu
}

// SetTable sets the table edge to MetaTable.
func (mcu *MetaColumnUpdate) SetTable(m *MetaTable) *MetaColumnUpdate {
	return mcu.SetTableID(m.ID)
}

// ClearTable clears the table edge to MetaTable.
func (mcu *MetaColumnUpdate) ClearTable() *MetaColumnUpdate {
	mcu.clearedTable = true
	return mcu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (mcu *MetaColumnUpdate) Save(ctx context.Context) (int, error) {
	if len(mcu.table) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"table\"")
	}
	return mcu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (mcu *MetaColumnUpdate) SaveX(ctx context.Context) int {
	affected, err := mcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mcu *MetaColumnUpdate) Exec(ctx context.Context) error {
	_, err := mcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcu *MetaColumnUpdate) ExecX(ctx context.Context) {
	if err := mcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mcu *MetaColumnUpdate) sqlSave(ctx context.Context) (n int, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   metacolumn.Table,
			Columns: metacolumn.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: metacolumn.FieldID,
			},
		},
	}
	if ps := mcu.predicates; len(ps) > 0 {
		spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := mcu.name; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: metacolumn.FieldName,
		})
	}
	if value := mcu._type; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: metacolumn.FieldType,
		})
	}
	if value := mcu._default; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: metacolumn.FieldDefault,
		})
	}
	if value := mcu.type_option; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: metacolumn.FieldTypeOption,
		})
	}
	if value := mcu.created_at; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: metacolumn.FieldCreatedAt,
		})
	}
	if value := mcu.updated_at; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: metacolumn.FieldUpdatedAt,
		})
	}
	if value := mcu.deleted_at; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: metacolumn.FieldDeletedAt,
		})
	}
	if mcu.cleardeleted_at {
		spec.Fields.Clear = append(spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: metacolumn.FieldDeletedAt,
		})
	}
	if mcu.clearedTable {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   metacolumn.TableTable,
			Columns: []string{metacolumn.TableColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metatable.FieldID,
				},
			},
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := mcu.table; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   metacolumn.TableTable,
			Columns: []string{metacolumn.TableColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metatable.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mcu.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MetaColumnUpdateOne is the builder for updating a single MetaColumn entity.
type MetaColumnUpdateOne struct {
	config
	id              int
	name            *string
	_type           *string
	_default        *string
	type_option     *string
	created_at      *time.Time
	updated_at      *time.Time
	deleted_at      *time.Time
	cleardeleted_at bool
	table           map[int]struct{}
	clearedTable    bool
}

// SetName sets the name field.
func (mcuo *MetaColumnUpdateOne) SetName(s string) *MetaColumnUpdateOne {
	mcuo.name = &s
	return mcuo
}

// SetType sets the type field.
func (mcuo *MetaColumnUpdateOne) SetType(s string) *MetaColumnUpdateOne {
	mcuo._type = &s
	return mcuo
}

// SetDefault sets the default field.
func (mcuo *MetaColumnUpdateOne) SetDefault(s string) *MetaColumnUpdateOne {
	mcuo._default = &s
	return mcuo
}

// SetTypeOption sets the type_option field.
func (mcuo *MetaColumnUpdateOne) SetTypeOption(s string) *MetaColumnUpdateOne {
	mcuo.type_option = &s
	return mcuo
}

// SetCreatedAt sets the created_at field.
func (mcuo *MetaColumnUpdateOne) SetCreatedAt(t time.Time) *MetaColumnUpdateOne {
	mcuo.created_at = &t
	return mcuo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (mcuo *MetaColumnUpdateOne) SetNillableCreatedAt(t *time.Time) *MetaColumnUpdateOne {
	if t != nil {
		mcuo.SetCreatedAt(*t)
	}
	return mcuo
}

// SetUpdatedAt sets the updated_at field.
func (mcuo *MetaColumnUpdateOne) SetUpdatedAt(t time.Time) *MetaColumnUpdateOne {
	mcuo.updated_at = &t
	return mcuo
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (mcuo *MetaColumnUpdateOne) SetNillableUpdatedAt(t *time.Time) *MetaColumnUpdateOne {
	if t != nil {
		mcuo.SetUpdatedAt(*t)
	}
	return mcuo
}

// SetDeletedAt sets the deleted_at field.
func (mcuo *MetaColumnUpdateOne) SetDeletedAt(t time.Time) *MetaColumnUpdateOne {
	mcuo.deleted_at = &t
	return mcuo
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (mcuo *MetaColumnUpdateOne) SetNillableDeletedAt(t *time.Time) *MetaColumnUpdateOne {
	if t != nil {
		mcuo.SetDeletedAt(*t)
	}
	return mcuo
}

// ClearDeletedAt clears the value of deleted_at.
func (mcuo *MetaColumnUpdateOne) ClearDeletedAt() *MetaColumnUpdateOne {
	mcuo.deleted_at = nil
	mcuo.cleardeleted_at = true
	return mcuo
}

// SetTableID sets the table edge to MetaTable by id.
func (mcuo *MetaColumnUpdateOne) SetTableID(id int) *MetaColumnUpdateOne {
	if mcuo.table == nil {
		mcuo.table = make(map[int]struct{})
	}
	mcuo.table[id] = struct{}{}
	return mcuo
}

// SetNillableTableID sets the table edge to MetaTable by id if the given value is not nil.
func (mcuo *MetaColumnUpdateOne) SetNillableTableID(id *int) *MetaColumnUpdateOne {
	if id != nil {
		mcuo = mcuo.SetTableID(*id)
	}
	return mcuo
}

// SetTable sets the table edge to MetaTable.
func (mcuo *MetaColumnUpdateOne) SetTable(m *MetaTable) *MetaColumnUpdateOne {
	return mcuo.SetTableID(m.ID)
}

// ClearTable clears the table edge to MetaTable.
func (mcuo *MetaColumnUpdateOne) ClearTable() *MetaColumnUpdateOne {
	mcuo.clearedTable = true
	return mcuo
}

// Save executes the query and returns the updated entity.
func (mcuo *MetaColumnUpdateOne) Save(ctx context.Context) (*MetaColumn, error) {
	if len(mcuo.table) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"table\"")
	}
	return mcuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (mcuo *MetaColumnUpdateOne) SaveX(ctx context.Context) *MetaColumn {
	mc, err := mcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return mc
}

// Exec executes the query on the entity.
func (mcuo *MetaColumnUpdateOne) Exec(ctx context.Context) error {
	_, err := mcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcuo *MetaColumnUpdateOne) ExecX(ctx context.Context) {
	if err := mcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mcuo *MetaColumnUpdateOne) sqlSave(ctx context.Context) (mc *MetaColumn, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   metacolumn.Table,
			Columns: metacolumn.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  mcuo.id,
				Type:   field.TypeInt,
				Column: metacolumn.FieldID,
			},
		},
	}
	if value := mcuo.name; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: metacolumn.FieldName,
		})
	}
	if value := mcuo._type; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: metacolumn.FieldType,
		})
	}
	if value := mcuo._default; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: metacolumn.FieldDefault,
		})
	}
	if value := mcuo.type_option; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: metacolumn.FieldTypeOption,
		})
	}
	if value := mcuo.created_at; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: metacolumn.FieldCreatedAt,
		})
	}
	if value := mcuo.updated_at; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: metacolumn.FieldUpdatedAt,
		})
	}
	if value := mcuo.deleted_at; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: metacolumn.FieldDeletedAt,
		})
	}
	if mcuo.cleardeleted_at {
		spec.Fields.Clear = append(spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: metacolumn.FieldDeletedAt,
		})
	}
	if mcuo.clearedTable {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   metacolumn.TableTable,
			Columns: []string{metacolumn.TableColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metatable.FieldID,
				},
			},
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := mcuo.table; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   metacolumn.TableTable,
			Columns: []string{metacolumn.TableColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metatable.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	mc = &MetaColumn{config: mcuo.config}
	spec.Assign = mc.assignValues
	spec.ScanValues = mc.scanValues()
	if err = sqlgraph.UpdateNode(ctx, mcuo.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return mc, nil
}
