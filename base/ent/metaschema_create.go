// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/mazti/restless/base/ent/metaschema"
)

// MetaSchemaCreate is the builder for creating a MetaSchema entity.
type MetaSchemaCreate struct {
	config
	base       *string
	created_at *time.Time
	updated_at *time.Time
	deleted_at *time.Time
}

// SetBase sets the base field.
func (msc *MetaSchemaCreate) SetBase(s string) *MetaSchemaCreate {
	msc.base = &s
	return msc
}

// SetCreatedAt sets the created_at field.
func (msc *MetaSchemaCreate) SetCreatedAt(t time.Time) *MetaSchemaCreate {
	msc.created_at = &t
	return msc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (msc *MetaSchemaCreate) SetNillableCreatedAt(t *time.Time) *MetaSchemaCreate {
	if t != nil {
		msc.SetCreatedAt(*t)
	}
	return msc
}

// SetUpdatedAt sets the updated_at field.
func (msc *MetaSchemaCreate) SetUpdatedAt(t time.Time) *MetaSchemaCreate {
	msc.updated_at = &t
	return msc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (msc *MetaSchemaCreate) SetNillableUpdatedAt(t *time.Time) *MetaSchemaCreate {
	if t != nil {
		msc.SetUpdatedAt(*t)
	}
	return msc
}

// SetDeletedAt sets the deleted_at field.
func (msc *MetaSchemaCreate) SetDeletedAt(t time.Time) *MetaSchemaCreate {
	msc.deleted_at = &t
	return msc
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (msc *MetaSchemaCreate) SetNillableDeletedAt(t *time.Time) *MetaSchemaCreate {
	if t != nil {
		msc.SetDeletedAt(*t)
	}
	return msc
}

// Save creates the MetaSchema in the database.
func (msc *MetaSchemaCreate) Save(ctx context.Context) (*MetaSchema, error) {
	if msc.base == nil {
		return nil, errors.New("ent: missing required field \"base\"")
	}
	if msc.created_at == nil {
		v := metaschema.DefaultCreatedAt()
		msc.created_at = &v
	}
	if msc.updated_at == nil {
		v := metaschema.DefaultUpdatedAt()
		msc.updated_at = &v
	}
	return msc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (msc *MetaSchemaCreate) SaveX(ctx context.Context) *MetaSchema {
	v, err := msc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (msc *MetaSchemaCreate) sqlSave(ctx context.Context) (*MetaSchema, error) {
	var (
		ms   = &MetaSchema{config: msc.config}
		spec = &sqlgraph.CreateSpec{
			Table: metaschema.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: metaschema.FieldID,
			},
		}
	)
	if value := msc.base; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: metaschema.FieldBase,
		})
		ms.Base = *value
	}
	if value := msc.created_at; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: metaschema.FieldCreatedAt,
		})
		ms.CreatedAt = *value
	}
	if value := msc.updated_at; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: metaschema.FieldUpdatedAt,
		})
		ms.UpdatedAt = *value
	}
	if value := msc.deleted_at; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: metaschema.FieldDeletedAt,
		})
		ms.DeletedAt = value
	}
	if err := sqlgraph.CreateNode(ctx, msc.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := spec.ID.Value.(int64)
	ms.ID = int(id)
	return ms, nil
}
