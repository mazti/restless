// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/mazti/restless/base/ent/metaschema"
	"github.com/mazti/restless/base/ent/metatable"
	"github.com/mazti/restless/base/ent/predicate"
)

// MetaSchemaQuery is the builder for querying MetaSchema entities.
type MetaSchemaQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.MetaSchema
	// intermediate query.
	sql *sql.Selector
}

// Where adds a new predicate for the builder.
func (msq *MetaSchemaQuery) Where(ps ...predicate.MetaSchema) *MetaSchemaQuery {
	msq.predicates = append(msq.predicates, ps...)
	return msq
}

// Limit adds a limit step to the query.
func (msq *MetaSchemaQuery) Limit(limit int) *MetaSchemaQuery {
	msq.limit = &limit
	return msq
}

// Offset adds an offset step to the query.
func (msq *MetaSchemaQuery) Offset(offset int) *MetaSchemaQuery {
	msq.offset = &offset
	return msq
}

// Order adds an order step to the query.
func (msq *MetaSchemaQuery) Order(o ...Order) *MetaSchemaQuery {
	msq.order = append(msq.order, o...)
	return msq
}

// QueryTables chains the current query on the tables edge.
func (msq *MetaSchemaQuery) QueryTables() *MetaTableQuery {
	query := &MetaTableQuery{config: msq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(metaschema.Table, metaschema.FieldID, msq.sqlQuery()),
		sqlgraph.To(metatable.Table, metatable.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, metaschema.TablesTable, metaschema.TablesColumn),
	)
	query.sql = sqlgraph.SetNeighbors(msq.driver.Dialect(), step)
	return query
}

// First returns the first MetaSchema entity in the query. Returns *ErrNotFound when no metaschema was found.
func (msq *MetaSchemaQuery) First(ctx context.Context) (*MetaSchema, error) {
	msSlice, err := msq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(msSlice) == 0 {
		return nil, &ErrNotFound{metaschema.Label}
	}
	return msSlice[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (msq *MetaSchemaQuery) FirstX(ctx context.Context) *MetaSchema {
	ms, err := msq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return ms
}

// FirstID returns the first MetaSchema id in the query. Returns *ErrNotFound when no id was found.
func (msq *MetaSchemaQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = msq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &ErrNotFound{metaschema.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (msq *MetaSchemaQuery) FirstXID(ctx context.Context) int {
	id, err := msq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only MetaSchema entity in the query, returns an error if not exactly one entity was returned.
func (msq *MetaSchemaQuery) Only(ctx context.Context) (*MetaSchema, error) {
	msSlice, err := msq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(msSlice) {
	case 1:
		return msSlice[0], nil
	case 0:
		return nil, &ErrNotFound{metaschema.Label}
	default:
		return nil, &ErrNotSingular{metaschema.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (msq *MetaSchemaQuery) OnlyX(ctx context.Context) *MetaSchema {
	ms, err := msq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return ms
}

// OnlyID returns the only MetaSchema id in the query, returns an error if not exactly one id was returned.
func (msq *MetaSchemaQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = msq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &ErrNotFound{metaschema.Label}
	default:
		err = &ErrNotSingular{metaschema.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (msq *MetaSchemaQuery) OnlyXID(ctx context.Context) int {
	id, err := msq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MetaSchemas.
func (msq *MetaSchemaQuery) All(ctx context.Context) ([]*MetaSchema, error) {
	return msq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (msq *MetaSchemaQuery) AllX(ctx context.Context) []*MetaSchema {
	msSlice, err := msq.All(ctx)
	if err != nil {
		panic(err)
	}
	return msSlice
}

// IDs executes the query and returns a list of MetaSchema ids.
func (msq *MetaSchemaQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := msq.Select(metaschema.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (msq *MetaSchemaQuery) IDsX(ctx context.Context) []int {
	ids, err := msq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (msq *MetaSchemaQuery) Count(ctx context.Context) (int, error) {
	return msq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (msq *MetaSchemaQuery) CountX(ctx context.Context) int {
	count, err := msq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (msq *MetaSchemaQuery) Exist(ctx context.Context) (bool, error) {
	return msq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (msq *MetaSchemaQuery) ExistX(ctx context.Context) bool {
	exist, err := msq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (msq *MetaSchemaQuery) Clone() *MetaSchemaQuery {
	return &MetaSchemaQuery{
		config:     msq.config,
		limit:      msq.limit,
		offset:     msq.offset,
		order:      append([]Order{}, msq.order...),
		unique:     append([]string{}, msq.unique...),
		predicates: append([]predicate.MetaSchema{}, msq.predicates...),
		// clone intermediate query.
		sql: msq.sql.Clone(),
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Base string `json:"base,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MetaSchema.Query().
//		GroupBy(metaschema.FieldBase).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (msq *MetaSchemaQuery) GroupBy(field string, fields ...string) *MetaSchemaGroupBy {
	group := &MetaSchemaGroupBy{config: msq.config}
	group.fields = append([]string{field}, fields...)
	group.sql = msq.sqlQuery()
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Base string `json:"base,omitempty"`
//	}
//
//	client.MetaSchema.Query().
//		Select(metaschema.FieldBase).
//		Scan(ctx, &v)
//
func (msq *MetaSchemaQuery) Select(field string, fields ...string) *MetaSchemaSelect {
	selector := &MetaSchemaSelect{config: msq.config}
	selector.fields = append([]string{field}, fields...)
	selector.sql = msq.sqlQuery()
	return selector
}

func (msq *MetaSchemaQuery) sqlAll(ctx context.Context) ([]*MetaSchema, error) {
	var (
		nodes []*MetaSchema
		spec  = msq.querySpec()
	)
	spec.ScanValues = func() []interface{} {
		node := &MetaSchema{config: msq.config}
		nodes = append(nodes, node)
		return node.scanValues()
	}
	spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, msq.driver, spec); err != nil {
		return nil, err
	}
	return nodes, nil
}

func (msq *MetaSchemaQuery) sqlCount(ctx context.Context) (int, error) {
	spec := msq.querySpec()
	return sqlgraph.CountNodes(ctx, msq.driver, spec)
}

func (msq *MetaSchemaQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := msq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (msq *MetaSchemaQuery) querySpec() *sqlgraph.QuerySpec {
	spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   metaschema.Table,
			Columns: metaschema.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: metaschema.FieldID,
			},
		},
		From:   msq.sql,
		Unique: true,
	}
	if ps := msq.predicates; len(ps) > 0 {
		spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := msq.limit; limit != nil {
		spec.Limit = *limit
	}
	if offset := msq.offset; offset != nil {
		spec.Offset = *offset
	}
	if ps := msq.order; len(ps) > 0 {
		spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return spec
}

func (msq *MetaSchemaQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(msq.driver.Dialect())
	t1 := builder.Table(metaschema.Table)
	selector := builder.Select(t1.Columns(metaschema.Columns...)...).From(t1)
	if msq.sql != nil {
		selector = msq.sql
		selector.Select(selector.Columns(metaschema.Columns...)...)
	}
	for _, p := range msq.predicates {
		p(selector)
	}
	for _, p := range msq.order {
		p(selector)
	}
	if offset := msq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := msq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MetaSchemaGroupBy is the builder for group-by MetaSchema entities.
type MetaSchemaGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate query.
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the group-by query.
func (msgb *MetaSchemaGroupBy) Aggregate(fns ...Aggregate) *MetaSchemaGroupBy {
	msgb.fns = append(msgb.fns, fns...)
	return msgb
}

// Scan applies the group-by query and scan the result into the given value.
func (msgb *MetaSchemaGroupBy) Scan(ctx context.Context, v interface{}) error {
	return msgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (msgb *MetaSchemaGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := msgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (msgb *MetaSchemaGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(msgb.fields) > 1 {
		return nil, errors.New("ent: MetaSchemaGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := msgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (msgb *MetaSchemaGroupBy) StringsX(ctx context.Context) []string {
	v, err := msgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (msgb *MetaSchemaGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(msgb.fields) > 1 {
		return nil, errors.New("ent: MetaSchemaGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := msgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (msgb *MetaSchemaGroupBy) IntsX(ctx context.Context) []int {
	v, err := msgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (msgb *MetaSchemaGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(msgb.fields) > 1 {
		return nil, errors.New("ent: MetaSchemaGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := msgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (msgb *MetaSchemaGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := msgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (msgb *MetaSchemaGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(msgb.fields) > 1 {
		return nil, errors.New("ent: MetaSchemaGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := msgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (msgb *MetaSchemaGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := msgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (msgb *MetaSchemaGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := msgb.sqlQuery().Query()
	if err := msgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (msgb *MetaSchemaGroupBy) sqlQuery() *sql.Selector {
	selector := msgb.sql
	columns := make([]string, 0, len(msgb.fields)+len(msgb.fns))
	columns = append(columns, msgb.fields...)
	for _, fn := range msgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(msgb.fields...)
}

// MetaSchemaSelect is the builder for select fields of MetaSchema entities.
type MetaSchemaSelect struct {
	config
	fields []string
	// intermediate queries.
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (mss *MetaSchemaSelect) Scan(ctx context.Context, v interface{}) error {
	return mss.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mss *MetaSchemaSelect) ScanX(ctx context.Context, v interface{}) {
	if err := mss.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (mss *MetaSchemaSelect) Strings(ctx context.Context) ([]string, error) {
	if len(mss.fields) > 1 {
		return nil, errors.New("ent: MetaSchemaSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := mss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mss *MetaSchemaSelect) StringsX(ctx context.Context) []string {
	v, err := mss.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (mss *MetaSchemaSelect) Ints(ctx context.Context) ([]int, error) {
	if len(mss.fields) > 1 {
		return nil, errors.New("ent: MetaSchemaSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := mss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mss *MetaSchemaSelect) IntsX(ctx context.Context) []int {
	v, err := mss.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (mss *MetaSchemaSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(mss.fields) > 1 {
		return nil, errors.New("ent: MetaSchemaSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := mss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mss *MetaSchemaSelect) Float64sX(ctx context.Context) []float64 {
	v, err := mss.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (mss *MetaSchemaSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(mss.fields) > 1 {
		return nil, errors.New("ent: MetaSchemaSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := mss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mss *MetaSchemaSelect) BoolsX(ctx context.Context) []bool {
	v, err := mss.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mss *MetaSchemaSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := mss.sqlQuery().Query()
	if err := mss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (mss *MetaSchemaSelect) sqlQuery() sql.Querier {
	selector := mss.sql
	selector.Select(selector.Columns(mss.fields...)...)
	return selector
}
