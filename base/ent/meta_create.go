// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/mazti/restless/base/ent/meta"
)

// MetaCreate is the builder for creating a Meta entity.
type MetaCreate struct {
	config
	base       *string
	schema     *string
	created_at *time.Time
	updated_at *time.Time
	deleted_at *time.Time
}

// SetBase sets the base field.
func (mc *MetaCreate) SetBase(s string) *MetaCreate {
	mc.base = &s
	return mc
}

// SetSchema sets the schema field.
func (mc *MetaCreate) SetSchema(s string) *MetaCreate {
	mc.schema = &s
	return mc
}

// SetCreatedAt sets the created_at field.
func (mc *MetaCreate) SetCreatedAt(t time.Time) *MetaCreate {
	mc.created_at = &t
	return mc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (mc *MetaCreate) SetNillableCreatedAt(t *time.Time) *MetaCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the updated_at field.
func (mc *MetaCreate) SetUpdatedAt(t time.Time) *MetaCreate {
	mc.updated_at = &t
	return mc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (mc *MetaCreate) SetNillableUpdatedAt(t *time.Time) *MetaCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetDeletedAt sets the deleted_at field.
func (mc *MetaCreate) SetDeletedAt(t time.Time) *MetaCreate {
	mc.deleted_at = &t
	return mc
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (mc *MetaCreate) SetNillableDeletedAt(t *time.Time) *MetaCreate {
	if t != nil {
		mc.SetDeletedAt(*t)
	}
	return mc
}

// Save creates the Meta in the database.
func (mc *MetaCreate) Save(ctx context.Context) (*Meta, error) {
	if mc.base == nil {
		return nil, errors.New("ent: missing required field \"base\"")
	}
	if mc.schema == nil {
		return nil, errors.New("ent: missing required field \"schema\"")
	}
	if mc.created_at == nil {
		v := meta.DefaultCreatedAt()
		mc.created_at = &v
	}
	if mc.updated_at == nil {
		v := meta.DefaultUpdatedAt()
		mc.updated_at = &v
	}
	return mc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MetaCreate) SaveX(ctx context.Context) *Meta {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mc *MetaCreate) sqlSave(ctx context.Context) (*Meta, error) {
	var (
		m    = &Meta{config: mc.config}
		spec = &sqlgraph.CreateSpec{
			Table: meta.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: meta.FieldID,
			},
		}
	)
	if value := mc.base; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: meta.FieldBase,
		})
		m.Base = *value
	}
	if value := mc.schema; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: meta.FieldSchema,
		})
		m.Schema = *value
	}
	if value := mc.created_at; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: meta.FieldCreatedAt,
		})
		m.CreatedAt = *value
	}
	if value := mc.updated_at; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: meta.FieldUpdatedAt,
		})
		m.UpdatedAt = *value
	}
	if value := mc.deleted_at; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: meta.FieldDeletedAt,
		})
		m.DeletedAt = value
	}
	if err := sqlgraph.CreateNode(ctx, mc.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := spec.ID.Value.(int64)
	m.ID = int(id)
	return m, nil
}
