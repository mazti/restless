// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/mazti/restless/newmeta/ent/meta"
	"github.com/mazti/restless/newmeta/ent/predicate"
)

// MetaUpdate is the builder for updating Meta entities.
type MetaUpdate struct {
	config
	base       *string
	schema     *string
	created_at *time.Time
	updated_at *time.Time
	predicates []predicate.Meta
}

// Where adds a new predicate for the builder.
func (mu *MetaUpdate) Where(ps ...predicate.Meta) *MetaUpdate {
	mu.predicates = append(mu.predicates, ps...)
	return mu
}

// SetBase sets the base field.
func (mu *MetaUpdate) SetBase(s string) *MetaUpdate {
	mu.base = &s
	return mu
}

// SetSchema sets the schema field.
func (mu *MetaUpdate) SetSchema(s string) *MetaUpdate {
	mu.schema = &s
	return mu
}

// SetCreatedAt sets the created_at field.
func (mu *MetaUpdate) SetCreatedAt(t time.Time) *MetaUpdate {
	mu.created_at = &t
	return mu
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (mu *MetaUpdate) SetNillableCreatedAt(t *time.Time) *MetaUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// SetUpdatedAt sets the updated_at field.
func (mu *MetaUpdate) SetUpdatedAt(t time.Time) *MetaUpdate {
	mu.updated_at = &t
	return mu
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (mu *MetaUpdate) SetNillableUpdatedAt(t *time.Time) *MetaUpdate {
	if t != nil {
		mu.SetUpdatedAt(*t)
	}
	return mu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (mu *MetaUpdate) Save(ctx context.Context) (int, error) {
	return mu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MetaUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MetaUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MetaUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MetaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   meta.Table,
			Columns: meta.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: meta.FieldID,
			},
		},
	}
	if ps := mu.predicates; len(ps) > 0 {
		spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := mu.base; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: meta.FieldBase,
		})
	}
	if value := mu.schema; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: meta.FieldSchema,
		})
	}
	if value := mu.created_at; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: meta.FieldCreatedAt,
		})
	}
	if value := mu.updated_at; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: meta.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MetaUpdateOne is the builder for updating a single Meta entity.
type MetaUpdateOne struct {
	config
	id         int
	base       *string
	schema     *string
	created_at *time.Time
	updated_at *time.Time
}

// SetBase sets the base field.
func (muo *MetaUpdateOne) SetBase(s string) *MetaUpdateOne {
	muo.base = &s
	return muo
}

// SetSchema sets the schema field.
func (muo *MetaUpdateOne) SetSchema(s string) *MetaUpdateOne {
	muo.schema = &s
	return muo
}

// SetCreatedAt sets the created_at field.
func (muo *MetaUpdateOne) SetCreatedAt(t time.Time) *MetaUpdateOne {
	muo.created_at = &t
	return muo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (muo *MetaUpdateOne) SetNillableCreatedAt(t *time.Time) *MetaUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// SetUpdatedAt sets the updated_at field.
func (muo *MetaUpdateOne) SetUpdatedAt(t time.Time) *MetaUpdateOne {
	muo.updated_at = &t
	return muo
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (muo *MetaUpdateOne) SetNillableUpdatedAt(t *time.Time) *MetaUpdateOne {
	if t != nil {
		muo.SetUpdatedAt(*t)
	}
	return muo
}

// Save executes the query and returns the updated entity.
func (muo *MetaUpdateOne) Save(ctx context.Context) (*Meta, error) {
	return muo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MetaUpdateOne) SaveX(ctx context.Context) *Meta {
	m, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return m
}

// Exec executes the query on the entity.
func (muo *MetaUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MetaUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MetaUpdateOne) sqlSave(ctx context.Context) (m *Meta, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   meta.Table,
			Columns: meta.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  muo.id,
				Type:   field.TypeInt,
				Column: meta.FieldID,
			},
		},
	}
	if value := muo.base; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: meta.FieldBase,
		})
	}
	if value := muo.schema; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: meta.FieldSchema,
		})
	}
	if value := muo.created_at; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: meta.FieldCreatedAt,
		})
	}
	if value := muo.updated_at; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: meta.FieldUpdatedAt,
		})
	}
	m = &Meta{config: muo.config}
	spec.Assign = m.assignValues
	spec.ScanValues = m.scanValues()
	if err = sqlgraph.UpdateNode(ctx, muo.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return m, nil
}
